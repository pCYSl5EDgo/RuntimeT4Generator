using System.Text;

namespace RuntimeT4Generator;

partial class Utility
{
    internal const string Attribute = @"// <auto-generated />

namespace RuntimeT4Generator
{
    [global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct, AllowMultiple = false, Inherited=false)]
    internal sealed class T4Attribute : global::System.Attribute
    {
        public T4Attribute(string path = """", Kind kind = Kind.StringBuilder, bool isIndent = false)
        {
        }
    }

    [global::System.FlagsAttribute]
    internal enum Kind
    {
        StringBuilder = 1,
        Utf8 = 2,
        Utf16 = 4,
        DefaultInterpolatedStringHandler = 8,
    }
}
";

    public static INamedTypeSymbol? SelectT4Attribute(Compilation compilation, CancellationToken token)
    {
        token.ThrowIfCancellationRequested();
        var type = compilation.GetTypeByMetadataName("RuntimeT4Generator.T4Attribute");
        return type;
    }

    public static bool Predicate(SyntaxNode node, CancellationToken token)
    {
        token.ThrowIfCancellationRequested();
        return node is TypeDeclarationSyntax { AttributeLists.Count: > 0 };
    }

    public static INamedTypeSymbol? Transform(GeneratorSyntaxContext context, CancellationToken token)
    {
        token.ThrowIfCancellationRequested();
        if (context.Node is not TypeDeclarationSyntax typeDeclarationSyntax)
        {
            return null;
        }

        return context.SemanticModel.GetDeclaredSymbol(typeDeclarationSyntax, token);
    }
}
