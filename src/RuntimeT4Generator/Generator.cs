namespace RuntimeT4Generator;

[Generator(LanguageNames.CSharp)]
public sealed class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(context => context.AddSource("Attribute", Utility.Attribute));

        var options = context.AnalyzerConfigOptionsProvider.Select(Options.Select).WithComparer(EqualityComparer<Options>.Default);
        {
            var rootNamespace = options.Select((options, token) =>
            {
                token.ThrowIfCancellationRequested();
                return options.RootNamespace;
            }).WithComparer(StringComparer.Ordinal);
            var files = context.AdditionalTextsProvider
                .Where(text => text.Path.EndsWith(".tt"))
                .Combine(context.AnalyzerConfigOptionsProvider)
                .Select(T4Info.Select)
                .WithComparer(EqualityComparer<T4Info>.Default)
                .Combine(rootNamespace)
                .Select(AdditionalFilesT4Info.Select)
                .Where(x => x is not null)!
                .WithComparer(EqualityComparer<AdditionalFilesT4Info>.Default);

            context.RegisterSourceOutput(files, Generate);
        }

        {
            var attribute = context.CompilationProvider
                .Select(Utility.SelectT4Attribute)
                .WithComparer(SymbolEqualityComparer.Default);
            var projectDir = options.Select((options, token) =>
            {
                token.ThrowIfCancellationRequested();
                return options.ProjectDir;
            }).WithComparer(StringComparer.Ordinal);
            var attributeFiles = context.SyntaxProvider
                .CreateSyntaxProvider(Utility.Predicate, Utility.Transform)
                .Where(x => x is not null)
                .Combine(attribute.Combine(projectDir))
                .Select(AttributeT4Info.Select!)
                .Where(x => x is not null)!
                .WithComparer(EqualityComparer<AttributeT4Info>.Default);
            context.RegisterSourceOutput(attributeFiles, Generate);
        }
    }

    private static void Generate(SourceProductionContext context, AdditionalFilesT4Info info)
    {
        var token = context.CancellationToken;
        token.ThrowIfCancellationRequested();
        var builder = new StringBuilder().AppendLine("// <auto-generated />");
        var text = info.SourceText.ToString().AsSpan();
        Utility.AppendPreprocess(builder, ref text, token);
        var indent = info.Preprocess(builder);
        if ((info.Kind & Kind.StringBuilder) != 0)
        {
            Utility.Generate(builder, indent, Kind.StringBuilder, info.ParameterName, info.IndentParameterName, text, token);
        }
        if ((info.Kind & Kind.Utf8) != 0)
        {
            Utility.Generate(builder, indent, Kind.Utf8, info.ParameterName, info.IndentParameterName, text, token);
        }
        if ((info.Kind & Kind.Utf16) != 0)
        {
            Utility.Generate(builder, indent, Kind.Utf16, info.ParameterName, info.IndentParameterName, text, token);
        }
        if ((info.Kind & Kind.DefaultInterpolatedStringHandler) != 0)
        {
            Utility.Generate(builder, indent, Kind.DefaultInterpolatedStringHandler, info.ParameterName, info.IndentParameterName, text, token);
        }

        info.Postprocess(builder);

        var code = builder.ToString();
        builder.Clear();
        if (info.Namespace != null)
        {
            builder.Append(info.Namespace).Append('.');
        }

        builder.Append(info.ParameterName);
        builder.Append(".g.cs");
        var hintName = builder.ToString();
        context.AddSource(hintName, code);
    }

    private static void Generate(SourceProductionContext context, AttributeT4Info info)
    {
        var token = context.CancellationToken;
        token.ThrowIfCancellationRequested();
        var builder = new StringBuilder().AppendLine("// <auto-generated />");
        var text = info.SourceText.ToString().AsSpan();
        Utility.AppendPreprocess(builder, ref text, token);

        using (var @namespace = new NamespaceTemplate.Scope(builder, info.TypeSymbol.ContainingNamespace))
        using (var type = new TypeTemplate.Scope(builder, info.TypeSymbol, @namespace.Indent))
        {
            if ((info.Kind & Kind.StringBuilder) != 0)
            {
                Utility.Generate(builder, type.Indent + 4, Kind.StringBuilder, info.ParameterName, info.IndentParameterName, text, token);
            }
            if ((info.Kind & Kind.Utf8) != 0)
            {
                Utility.Generate(builder, type.Indent + 4, Kind.Utf8, info.ParameterName, info.IndentParameterName, text, token);
            }
            if ((info.Kind & Kind.Utf16) != 0)
            {
                Utility.Generate(builder, type.Indent + 4, Kind.Utf16, info.ParameterName, info.IndentParameterName, text, token);
            }
            if ((info.Kind & Kind.DefaultInterpolatedStringHandler) != 0)
            {
                Utility.Generate(builder, type.Indent + 4, Kind.DefaultInterpolatedStringHandler, info.ParameterName, info.IndentParameterName, text, token);
            }
        }

        var code = builder.ToString();
        builder.Clear();
        builder.Append(info.TypeSymbol.ToDisplayString());
        builder.Append('.');
        builder.Append(info.ParameterName);
        builder.Append(".g.cs");
        var hintName = builder.ToString();
        context.AddSource(hintName, code);
    }
}
