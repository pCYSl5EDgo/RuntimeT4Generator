namespace RuntimeT4Generator;

[Generator(LanguageNames.CSharp)]
public sealed class Generator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        var token = context.CancellationToken;
        var options = new Options(context.AnalyzerConfigOptions.GlobalOptions);
        var rootNamespace = options.RootNamespace;
        var builder = new StringBuilder();
        foreach (var file in context.AdditionalFiles)
        {
            var t4Info = T4Info.Select((file, context.AnalyzerConfigOptions), token);
            if (t4Info is null)
            {
                continue;
            }

            var info = AdditionalFilesT4Info.Select((t4Info, rootNamespace, token))
            if (info is null)
            {
                continue;
            }

            token.ThrowIfCancellationRequested();
            builder.Clear().AppendLine("// <auto-generated />");
            var text = info.SourceText.ToString().AsSpan();
            Utility.AppendPreprocess(builder, ref text, token);
            var indent = info.Preprocess(builder);
            if ((info.Kind & Kind.StringBuilder) != 0)
            {
                Utility.Generate(builder, indent, Kind.StringBuilder, info.ParameterName, info.IndentParameterName, text, token);
            }
            if ((info.Kind & Kind.Utf8) != 0)
            {
                Utility.Generate(builder, indent, Kind.Utf8, info.ParameterName, info.IndentParameterName, text, token);
            }
            if ((info.Kind & Kind.Utf16) != 0)
            {
                Utility.Generate(builder, indent, Kind.Utf16, info.ParameterName, info.IndentParameterName, text, token);
            }
            if ((info.Kind & Kind.DefaultInterpolatedStringHandler) != 0)
            {
                Utility.Generate(builder, indent, Kind.DefaultInterpolatedStringHandler, info.ParameterName, info.IndentParameterName, text, token);
            }

            info.Postprocess(builder);

            var code = builder.ToString();
            var hintName = info.HintName;
            context.AddSource(hintName, code);
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {
    }
}
